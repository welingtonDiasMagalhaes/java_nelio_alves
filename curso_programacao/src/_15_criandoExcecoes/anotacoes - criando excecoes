Uma exceção é qualquer condição de erro ou comportamento inesperado encontrado por um programa em execução
• Em Java, uma exceção é um objeto herdado da classe:
	• java.lang.Exception - o compilador obriga a tratar ou propagar
	• java.lang.RuntimeException - o compilador não obriga a tratar ou propagar
• Quando lançada, uma exceção é propagada na pilha de chamadas de métodos em execução, até que seja capturada (tratada) ou o
programa seja encerrado

Hierarquia de exceções do Java
https://docs.oracle.com/javase/10/docs/api/java/lang/package-tree.html
	Throwable
		Error
			OutOfMemoryError
			VirtualMachineError
		Exception
			IOException
			RuntimeException
				NullPointerException
				IndexOutOfBoundsException

Exceções vantagens:
• Delega a lógica do erro para a classe responsável por conhecer as regras que
podem ocasionar o erro
• Trata de forma organizada (inclusive hierárquica) exceções de tipos diferentes
• A exceção pode carregar dados quaisquer


• Cláusula throws: propaga a exceção ao invés de trata-la
• Cláusula throw: lança a exceção / "corta" o método
• Exception: o compilador obriga a tratar ou propagar
• RuntimeException: o compilador não obriga a tratar ou propagar
• O modelo de tratamento de exceções permite que erros sejam tratados de forma consistente e flexível, usando boas práticas
Vantagens:
	• Lógica delegada
	• Construtores podem ter tratamento de exceções
	• Possibilidade de auxílio do compilador (Exception)
	• Código mais simples. Não há aninhamento de condicionais: a qualquer momento que uma exceção for
	disparada, a execução é interrompida e cai no bloco catch correspondente.
	• É possível capturar inclusive outras exceções de sistema